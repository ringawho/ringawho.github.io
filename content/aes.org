#+title: AES加密
* 前言
最近在了解逆向的事情，目前看了解并且熟悉常见的算法是很有必要的。AES就是常见的加密算法之一，最好的熟悉方式莫过于实现一遍

* ~AES~ 加密模式
- ECB（Electronic Codebook，电子密码本）模式：这是最简单的加密模式，将明文分成固定大小的分组，然后对每个分组进行独立的加密。同样的明文块会生成相同的密文块，因此安全性较低，不推荐使用。
- CBC（Cipher Block Chaining，密码块链模式）模式：这是一种常用的加密模式。每个分组在加密之前都与前一个分组的密文进行XOR运算，然后再应用加密算法。这种模式增加了密码块之间的混淆性，提高了安全性。
- CFB（Cipher Feedback，密码反馈模式）模式：这种模式将前一个密文分组作为输入来加密下一个明文分组。它可以以比分组大小更小的单位进行加密，具有比CBC模式更好的随机性和误差传播性。
- OFB（Output Feedback，输出反馈模式）模式：在OFB模式下，加密算法的输出用于生成密钥流，然后与明文进行XOR运算。这种模式可以进行并行计算，适合在流加密中使用。
- CTR（Counter，计数器模式）模式： 在CTR模式下，每个分组都通过与递增的计数器进行加密来生成密文。这种模式支持并行计算，并且可以很好地适应随机访问和流模式。

这些是常见的AES加密模式，每种模式都有其适用的场景和特点。在使用时，需要根据具体的需求和安全性要求选择合适的加密模式。

* ~AES~ 加密过程
#+begin_src dot :file img/aes.png :cmdline -Kdot -Tpng
  digraph G {
      size = "4, 4";
      splines = ortho;
      node[shape=box];

      key0 [label=轮密钥加];
      key1 [label=轮密钥加];

      明文 -> key0 -> 字节替代;

      subgraph cluster_single_loop {
          label = 第一轮循环;
          labeljust = l;
          lwidth = 3;
          bgcolor = "#EEEEEE";
          字节替代 -> 行移位 -> 列混淆 -> key1
      }
  }
#+end_src

#+RESULTS:
[[file:img/aes.png]]
